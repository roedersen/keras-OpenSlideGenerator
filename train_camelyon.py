'''Train a simple deep CNN on the polygonal annotated slides using OpenSlideGenerator.
'''

from __future__ import print_function
from matplotlib import cm
from matplotlib import pyplot as plt
import tensorflow as tf
import tensorflow.keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.optimizers import RMSprop
import os
import math
import time
from datetime import datetime
import openslide_generator

def plot_loss_history(training_history, logscale=False):
    loss = training_history['loss']
    val_loss = training_history['val_loss']
    epochs = range(1, len(loss) + 1)
    plt.plot(epochs, loss, color='red', label='Training loss')
    plt.plot(epochs, val_loss, color='green', label='Validation loss')
    plt.title('Training and validation loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    if logscale:
        plt.yscale('log')
    plt.show()

    
def plot_accuracy_history(training_history):
    acc = training_history['accuracy']
    val_acc = training_history['val_accuracy']
    epochs = range(1, len(acc) + 1)
    plt.plot(epochs, acc, color='red', label='Training acc')
    plt.plot(epochs, val_acc, color='green', label='Validation acc')
    plt.title('Training and validation accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.show()




print("Definition generator")
# create generator instance
gen_train = openslide_generator.OpenSlideGenerator('C:/Users/arno/Documents/fourthbrain/capstone/data/labels/labels_train.txt', \
        'C:/Users/arno/Documents/fourthbrain/capstone/data/training/', 512, 256, fetch_mode='label-slide', label_to_use=0)

print("gen_train defined")

gen_val = openslide_generator.OpenSlideGenerator('C:/Users/arno/Documents/fourthbrain/capstone/data/labels/labels_val.txt', \
                'C:/Users/arno/Documents/fourthbrain/capstone/data/training/', 512, 256, fetch_mode='label-slide', label_to_use=0)

print("gen_val defined")

print(f'fetch_mode: {gen_train.fetch_mode}')

batch_size = 100
num_classes = len(gen_train.labels[gen_train.label_to_use])
epochs = 1
data_augmentation = False
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_openslide_trained_model.h5'
t_steps = math.ceil(gen_train.patch_per_epoch/batch_size)
v_steps = math.ceil(gen_val.patch_per_epoch/batch_size)

#print(f'gen_train.label_to_use: {gen_train.label_to_use}')
#print(f'gen_train.labels[gen_train.label_to_use]: {gen_train.labels[gen_train.label_to_use]}')
#print(f'gen_train.labels: {gen_train.labels}')

print(f't_steps: {t_steps}')
print(f'v_steps: {v_steps}')
print(f'num_classes: {num_classes}')

# model construction
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=gen_train.shape()))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = RMSprop(learning_rate=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

print("model compile successful")
# Fit the model on the batches generated by datagen.flow().
training_history = model.fit(gen_train.flow(batch_size=batch_size),
steps_per_epoch=t_steps, 
epochs=epochs, 
validation_data=gen_val.flow(batch_size=batch_size),
validation_steps=v_steps,
workers=4,
use_multiprocessing=True,
verbose=1)

now = datetime.now()
model.save('C:/Users/arno/Documents/fourthbrain/capstone/model/model_' + str(now.strftime("%Y%m%d_%H%M")),save_format='tf')
print('Saved trained model')

plot_accuracy_history(training_history.history)
plot_loss_history(training_history.history)
plot_loss_history(training_history.history, logscale=True)




